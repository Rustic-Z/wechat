<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd" default-autowire="byName">
	
	<!-- environment-depend variable definition -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/env.properties</value>
			</list>
		</property>
	</bean>

	<!-- use annotation to register bean automatically, ensure property @Required,@Autowired be injected  -->
	<context:component-scan base-package="com" />
	<context:annotation-config/>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
        <property name="jdbcUrl" value="${jdbc.url}"/>  
        <property name="driverClass" value="${jdbc.driver}"/>  
        <property name="user" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/> 
        <property name="maxPoolSize" value="50"/>  
        <property name="minPoolSize" value="1"/>  
        <property name="initialPoolSize" value="1"/>  
         
        <property name="acquireIncrement" value="5"/>  
         
        <!-- JDBC standard arguments, used to control in-dataSource loading, number of PreparedStatements -->
        <!-- Because of the pre-cached statements belongs to single connection instead of the whole connection pool -->
        <!-- Please be sure to consider all side-affect when changing this argument -->
        <!-- if maxStatements and maxStatementsPerConnection both are 0，the cache will be shutdown, Default: 0- -->
        <property name="maxStatements" value="0"/> 
        <property name="acquireRetryDelay" value="1000"/> 
        <property name="acquireRetryAttempts" value="30"/> 
        
        <!-- fail to acquire connection may have all waiting connection pools get the exception from the connection thread --> 
        <!-- dataSource is still available, and will be used to try to get connection when the next getConnection() is called --> 
        <!-- true: when connection acquiring is failed, dataSource will be disconnected and closed permanently, Default: false-->  
        <property name="breakAfterAcquireFailure" value="false"/>   
        
        <!--  because of the overload, only use it when needed -->
        <!-- true: verify every connection when it is committed -->
        <!-- It is strongly recommended to use methods such as idleConnectionTestPeriod or automaticTestTable -->
        <!--  to test the performance  Default: false-->
        <property name="testConnectionOnCheckout" value="true"/>  
        <property name="testConnectionOnCheckin" value="true"/> 
        <property name="automaticTestTable" value="c3p0testtable"/> 
        <property name="idleConnectionTestPeriod" value="300"/> 
        <property name="maxIdleTime" value="25000"/> 
        <property name="checkoutTimeout" value="5000"/> 
    </bean> 
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.rustic.wechat.entity" />
	</bean>

	<!-- transaction manager configurations, single source transaction -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 基于注解的事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<bean id="baseTokenDao" class="com.rustic.wechat.dao.BaseTokenDao"/>
	
	<import resource="classpath*:/quartz.xml"/><!--任务调度 -->
</beans>